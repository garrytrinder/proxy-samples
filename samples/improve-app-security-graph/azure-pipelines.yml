trigger:
- main
- dev

pool:
  vmImage: ubuntu-latest

variables:
- name: LOG_FILE
  value: devproxy.log
- name: DEV_PROXY_VERSION
  value: v0.19.0
- name: DEV_PROXY_CACHE_RESTORED
  value: 'false'
- name: PLAYWRIGHT_CACHE_RESTORED
  value: 'false'

steps:

- task: UseNode@1
  inputs:
    version: '20.x'
  displayName: 'Install Node.js'

- script: npm ci
  displayName: 'Install dependencies'

- script: echo "const appId = '$APPID';" > src/env.js
  displayName: 'Create env.js file in src folder'
  env:
    APPID: $(APPID)

- script: |
    echo "TEST_USERNAME=$TEST_USERNAME" > .env
    echo "TEST_PASSWORD=$TEST_PASSWORD" >> .env
  displayName: 'Create dotenv file'
  env:
    TEST_USERNAME: $(TEST_USERNAME)
    TEST_PASSWORD: $(TEST_PASSWORD)

#################################
# Cache + install of Playwright #
#################################
- script: |
    PLAYWRIGHT_VERSION=$(npm ls @playwright/test | grep @playwright | sed 's/.*@//')
    echo "Playwright's Version: $PLAYWRIGHT_VERSION"
    echo "##vso[task.setvariable variable=PLAYWRIGHT_VERSION]$PLAYWRIGHT_VERSION"
  displayName: Store Playwright's Version

- task: Cache@2
  inputs:
    key: '"playwright-ubuntu-$(PLAYWRIGHT_VERSION)"'
    path: '$(HOME)/.cache/ms-playwright'
    cacheHitVar: PLAYWRIGHT_CACHE_RESTORED
  displayName: Cache Playwright Browsers for Playwright's Version

- script: npx playwright install --with-deps
  condition: ne(variables['PLAYWRIGHT_CACHE_RESTORED'], 'true')
  displayName: 'Install Playwright Browsers'

################################
# Cache + install of Dev Proxy #
################################
- task: Cache@2
  inputs:
    key: '"dev-proxy-$(DEV_PROXY_VERSION)"'
    path: ./devproxy
    cacheHitVar: DEV_PROXY_CACHE_RESTORED
  displayName: Cache Dev Proxy

- script: bash -c "$(curl -sL https://aka.ms/devproxy/setup.sh)" $DEV_PROXY_VERSION
  displayName: 'Install Dev Proxy'
  condition: ne(variables.DEV_PROXY_CACHE_RESTORED, 'true')

- script: bash ./run.sh
  displayName: 'Run Dev Proxy'

- task: PublishPipelineArtifact@1
  displayName: Upload Dev Proxy logs
  inputs:
    targetPath: $(LOG_FILE)
    artifact: $(LOG_FILE)

- script: |
    mkdir -p $(Build.ArtifactStagingDirectory)/Reports
    for file in *Reporter*; do
      if [ -f "$file" ]; then
        cp "$file" $(Build.ArtifactStagingDirectory)/Reports
      fi
    done
  displayName: 'Copy reports to artifact directory'

- task: PublishPipelineArtifact@1
  displayName: Upload Dev Proxy reports
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/Reports'
    artifact: 'Reports'